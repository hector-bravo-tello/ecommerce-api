openapi: 3.0.0
info:
  title: E-commerce API
  description: This API handles user authentication, product management, cart operations, and order processing for an e-commerce platform.
  version: 1.0.0
servers:
  - url: 'http://localhost:3000'
    description: Development server

paths:
  /users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - full_name
              properties:
                email:
                  type: string
                password:
                  type: string
                full_name:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                  message:
                    type: string
        '500':
          description: Error in registration process

  /users/login:
    post:
      summary: Log in a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Invalid credentials
        '404':
          description: User not found
        '500':
          description: Server error

  /users/{userId}:
    get:
      summary: Retrieve user details by ID
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: Unique identifier of the user
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Server error
    put:
      summary: Update user details
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: Unique identifier of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                full_name:
                  type: string
      responses:
        '200':
          description: User updated successfully
        '500':
          description: Server error
    delete:
      summary: Delete a user
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: Unique identifier of the user
      responses:
        '200':
          description: User deleted successfully
        '500':
          description: Server error

  /products:
    get:
      summary: List all products
      tags:
        - Products
      responses:
        '200':
          description: List of all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '500':
          description: Error creating product

  /products/{productId}:
    get:
      summary: Get a single product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: Unique identifier of the product
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '500':
          description: Server error
    put:
      summary: Update a product
      tags:
        - Products
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: Unique identifier of the product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
        '404':
          description: Product not found
        '500':
          description: Server error
    delete:
      summary: Delete a product
      tags:
        - Products
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: Unique identifier of the product
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found
        '500':
          description: Server error

  /cart/{userId}:
    get:
      summary: Retrieve a user's cart
      tags:
        - Carts
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: Unique identifier of the user
      responses:
        '200':
          description: Cart details retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
        '404':
          description: Cart not found
        '500':
          description: Server error

  /cart/{userId}/items:
    post:
      summary: Add an item to a user's cart
      tags:
        - Carts
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: Unique identifier of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: integer
                quantity:
                  type: integer
      responses:
        '201':
          description: Item added to cart
        '500':
          description: Error adding item to cart

  /orders/{userId}:
    get:
      summary: List all orders for a user
      tags:
        - Orders
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: Unique identifier of the user
      responses:
        '200':
          description: Orders listed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: No orders found for this user
        '500':
          description: Server error

  /token:
    post:
      summary: Refresh access token using a refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '401':
          description: No refresh token provided
        '403':
          description: Invalid or expired refresh token
        '500':
          description: Server error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        full_name:
          type: string

    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: integer

    CartItem:
      type: object
      properties:
        productId:
          type: integer
        quantity:
          type: integer

    Order:
      type: object
      properties:
        id:
          type: integer
        status:
          type: string
        total:
          type: number

    RefreshToken:
      type: object
      properties:
        refreshToken:
          type: string
